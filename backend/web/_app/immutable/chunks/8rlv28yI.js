import{k as i,g as r,l as n,m as u}from"./BC3TVD7I.js";import{A as f,a as g}from"./CBkskisn.js";class c{#t=i(null);get data(){return r(this.#t)}set data(t){n(this.#t,t,!0)}#s=i(!1);get loading(){return r(this.#s)}set loading(t){n(this.#s,t,!0)}#a=i(null);get error(){return r(this.#a)}set error(t){n(this.#a,t,!0)}get isSuccess(){return!this.loading&&!this.error&&this.data!==null}reset(){this.data=null,this.loading=!1,this.error=null}async execute(t,s){this.loading=!0,this.error=null;try{const a=await t;this.data=s?s(a):a}catch(a){this.error=a instanceof Error?a:new Error("Unknown error"),this.data=null}finally{this.loading=!1}}}class w{client=new f;#t=i(null);get tasks(){return r(this.#t)}set tasks(t){n(this.#t,t,!0)}#s=i(u(new Map));get taskStates(){return r(this.#s)}set taskStates(t){n(this.#s,t,!0)}async fetchTasks(){}getTaskState(t){return this.taskStates.has(t)||this.taskStates.set(t,new c),this.taskStates.get(t)}async fetchTask(t){const s=this.getTaskState(t);if(await s.execute(this.client.get(`/api/tasks/${t}`)),this.tasks?.data&&s.data){const a=this.tasks.data.findIndex(e=>e.taskId===t);a>=0&&(this.tasks.data[a]=s.data)}}async createTask(t){const s=new c;return await s.execute(this.client.post("/api/tasks",t)),s.data&&this.tasks?.data&&(this.tasks.data=[...this.tasks.data,s.data],this.taskStates.set(s.data.taskId,s)),s}async cancelTask(t){const s=this.getTaskState(t);if(await s.execute(this.client.post(`/api/tasks/${t}/cancel`)),s.data&&this.tasks?.data){const a=this.tasks.data.find(e=>e.taskId===t);a&&(a.status="cancelled")}}async*streamTaskLogs(t){const s=await fetch(`/api/tasks/${t}/logs`,{headers:{Accept:"text/event-stream"}});if(!s.ok)throw new g(s.status,s.statusText);const a=s.body?.getReader();if(!a)throw new Error("No response body");const e=new TextDecoder;try{for(;;){const{done:h,value:d}=await a.read();if(h)break;const k=e.decode(d).split(`
`);for(const o of k)o.startsWith("data: ")&&(yield o.substring(6))}}finally{a.releaseLock()}}cleanup(){this.tasks=null,this.taskStates.clear()}}const T=new w;export{T as t};
