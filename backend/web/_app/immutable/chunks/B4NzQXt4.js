import{i as d,j as g,k as o,g as i,l as r,m as a}from"./CibTsHxy.js";import{A as p,g as b}from"./vycYFVnX.js";class w{#e=o(!1);get connected(){return i(this.#e)}set connected(e){r(this.#e,e,!0)}#t=o(!1);get connecting(){return i(this.#t)}set connecting(e){r(this.#t,e,!0)}#s=o(!1);get authenticated(){return i(this.#s)}set authenticated(e){r(this.#s,e,!0)}#n=o(null);get error(){return i(this.#n)}set error(e){r(this.#n,e,!0)}#o=o(a([]));get messages(){return i(this.#o)}set messages(e){r(this.#o,e,!0)}#i=o(a(new Map));get taskMessages(){return i(this.#i)}set taskMessages(e){r(this.#i,e,!0)}#r=o(a(new Set));get subscriptions(){return i(this.#r)}set subscriptions(e){r(this.#r,e,!0)}ws=null;url;reconnectTimer;heartbeatTimer;reconnectAttempts=0;get isReady(){return this.connected&&this.authenticated}get latestMessage(){return this.messages[this.messages.length-1]}constructor(e){this.url=e||p.websocket}connect(){if(typeof window>"u"||typeof WebSocket>"u"){console.warn("[WebSocket] ブラウザ環境ではありません。接続をスキップします。");return}if(this.connected||this.connecting||this.ws){console.log("[WebSocket] 既に接続中または接続済み",{connected:this.connected,connecting:this.connecting,hasWs:!!this.ws});return}this.connecting=!0,this.error=null;try{console.log("[WebSocket] 接続を開始します:",this.url),this.ws=new window.WebSocket(this.url),console.log("[WebSocket] WebSocket作成完了",{readyState:this.ws.readyState,url:this.ws.url}),this.ws.onopen=()=>this.handleOpen(),this.ws.onmessage=e=>this.handleMessage(e),this.ws.onerror=e=>this.handleError(e),this.ws.onclose=e=>this.handleClose(e)}catch(e){console.error("[WebSocket] 接続エラー:",e),this.connecting=!1,this.error=e instanceof Error?e:new Error("接続エラー")}}disconnect(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=void 0),this.stopHeartbeat(),this.ws&&(this.ws.close(1e3,"ユーザーによる切断"),this.ws=null),this.connected=!1,this.connecting=!1,this.authenticated=!1,this.subscriptions.clear()}send(e){if(!this.connected||!this.ws){console.error("WebSocket未接続");return}this.ws.send(JSON.stringify(e))}authenticate(){if(typeof window>"u"){console.warn("[WebSocket] ブラウザ環境ではありません。認証をスキップします。");return}const e=b();if(console.log("[WebSocket] 認証を開始",{hasApiKey:!!e}),!e){console.warn("[WebSocket] APIキーが設定されていません");const t="hoge";console.log("[WebSocket] デフォルトAPIキーを使用します");const c={type:"auth",payload:{apiKey:t}};this.send(c);return}const s={type:"auth",payload:{apiKey:e}};console.log("[WebSocket] 認証メッセージを送信",{type:s.type}),this.send(s)}subscribe(e){this.subscriptions.has(e)||(this.subscriptions.add(e),this.connected&&this.send({type:"subscribe",payload:{taskId:e}}))}unsubscribe(e){this.subscriptions.has(e)&&(this.subscriptions.delete(e),this.connected&&this.send({type:"unsubscribe",payload:{taskId:e}}))}getTaskMessages(e){return this.taskMessages.get(e)||[]}clearTaskMessages(e){const s=new Map(this.taskMessages);s.delete(e),this.taskMessages=s}handleOpen(){console.log("[WebSocket] 接続成功"),this.connected=!0,this.connecting=!1,this.reconnectAttempts=0,this.authenticate(),this.startHeartbeat(),this.subscriptions.forEach(e=>{this.send({type:"subscribe",payload:{taskId:e}})})}handleMessage(e){try{const s=JSON.parse(e.data),t=this.normalizeMessage(s);if(this.messages=[...this.messages,t],t.taskId){const c=this.taskMessages.get(t.taskId)||[];this.taskMessages=new Map(this.taskMessages).set(t.taskId,[...c,t])}console.log("[WebSocket] メッセージ受信:",t.type,t),typeof window<"u"&&window.dispatchEvent(new CustomEvent("websocket:message",{detail:t})),t.type==="auth:success"&&(this.authenticated=!0,console.log("[WebSocket] 認証成功")),t.type==="auth:error"&&(this.authenticated=!1,console.error("[WebSocket] 認証失敗:",t.error)),t.type}catch(s){console.error("メッセージ解析エラー:",s)}}handleError(e){console.error("WebSocketエラー:",e),this.error=new Error("WebSocket接続エラー")}handleClose(e){console.log("WebSocket切断:",e.code,e.reason),this.connected=!1,this.connecting=!1,this.authenticated=!1,this.ws=null,this.stopHeartbeat(),e.code!==1e3&&e.code!==1001&&this.scheduleReconnect()}scheduleReconnect(){if(this.reconnectTimer)return;if(this.reconnectAttempts>=10){this.error=new Error("再接続の最大試行回数に達しました");return}this.reconnectAttempts++;const e=Math.min(5e3*Math.pow(2,this.reconnectAttempts-1),3e4);console.log(`${e}ms後に再接続を試みます（${this.reconnectAttempts}/10）`),this.reconnectTimer=window.setTimeout(()=>{this.reconnectTimer=void 0,this.ws=null,this.connect()},e)}startHeartbeat(){this.heartbeatTimer=window.setInterval(()=>{this.connected&&this.ws&&this.ws.readyState===WebSocket.OPEN&&this.send({type:"ping",payload:{}})},3e4)}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=void 0)}normalizeMessage(e){if(e.payload){const{type:s,payload:t}=e,{taskId:c,timestamp:l,...u}=t||{};return{type:s,taskId:c,data:u,timestamp:l||new Date().toISOString()}}else return{...e,timestamp:e.timestamp||new Date().toISOString()}}}const h=Symbol("websocket");function k(n){d(h,n)}function y(){const n=g(h);if(!n)throw new Error("WebSocketコンテキストが設定されていません");return n}function S(n){return new w(n)}export{S as c,y as g,k as s};
